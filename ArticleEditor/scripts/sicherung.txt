
var fillData = function () {
	console.log("--------------------------> in here");
	var idCnt = 0;
	/*for (var i = 0; i < 5; i++) {
	nodes.add({
	id : idCnt,
	title : 'tooltip' + idCnt,
	label : 'Node ' + idCnt,
	image : dr.getImageArray()[i],
	shape : "image",
	value : 10,
	allowedToMoveX : true,
	allowedToMoveY : true,
	//widthMax: 30
	});
	idCnt++;

	}*/
	/*
	nodes.add({
	id : i,
	title : 'tooltip' + i,
	label : 'Node ' + i,
	image : "media/1 (" + i + ").jpg",
	shape : "image",
	allowedToMoveX : true,
	allowedToMoveY : true,
	widthMax : 20,
	radius: 50
	});*/
	/*
	nodes.add({
	id : 5,
	title : 'tooltip' + 5,
	label : 'Node ' + 5,
	image : "media/1 (1).png",
	shape : "image",
	allowedToMoveX : true,
	allowedToMoveY : true,
	widthMax : 20,
	radius: 50
	});*/

	// FILL PARAGRAPHS:
	var articleText = dr.getRawText();
	var sections = articleText.split("<span ");
	var levelCnt = 0;
	var sectionCnt = 0;
	var xOffset = 500;
	var yOffset = 300;
	for (var i = 20; i < 30; i++) {

		var paragraphs = sections[i].split("</p>\n<p>");
		if (paragraphs.length > 0) {

			nodes.add({
				id : idCnt,
				x : levelCnt * xOffset,
				y : 0,
				title : 'tooltip' + idCnt,
				label : 'x: ' + (levelCnt * 500) + ' y: 50',
				level : levelCnt,
				value : 1,
				allowedToMoveX : true,
				allowedToMoveY : true
			});

			if (levelCnt > 0) {
				edges.add({
					from : sectionCnt,
					to : idCnt,
					style : "arrow"
				});
			}
			sectionCnt = idCnt;
			idCnt++;
			levelCnt++;
			var yCnt = paragraphs.length / 2;
			for (var j = 0; j < paragraphs.length; j++) {
				var paragraph = paragraphs[j];
				yCnt--;
				if (yCnt == 0)
					yCnt--;
				//console.log(paragraph)
				paragraph += "</p>";
				paragraph = "<p>" + paragraph;

				//console.log(paragraph);
				var help = paragraph;
				/*paragraph = '<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">' +
				'<rect x="0" y="0" width="100%" height="100%" fill="#7890A7" stroke-width="1" stroke="#ffffff" ></rect>' +
				'<foreignObject x="0" y="0" width="100%" height="100%">' +
				'<div xmlns="http://www.w3.org/1999/xhtml" style="font-size:11px">'
				+ paragraph +
				'</div>' + '</foreignObject>' + '</svg>';
				var svg = new Blob([paragraph], {
				type : 'image/svg+xml;charset=utf-8'
				});
				var url = DOMURL.createObjectURL(svg);*/
				var value = help.split(' ').length;
				help = replaceCharacterWithAnother(help, " ", '\n', 10);
				nodes.add({
					id : idCnt,
					x : levelCnt * xOffset,
					y : yCnt * yOffset,
					title : 'tooltip' + idCnt,
					label : help,
					text : help,
					shape : 'box',
					level : levelCnt,
					value : value,
					//image : url,
					//shape : "image",
					allowedToMoveX : true,
					allowedToMoveY : true
				});
				console.log("WIDTH: " + nodes.get(idCnt).title + " : " + nodes.get(idCnt).widthMax)
				edges.add({
					from : sectionCnt,
					to : idCnt,
					style : "arrow"
				});

				idCnt++;
			}

			levelCnt++;
		}
	}
	/*	for (var i = 0; i < paragraphs.length; i++) {
	var paragraph = paragraphs[i];
	paragraph += "</p>";
	paragraph = "<p>" + paragraph;

	console.log(paragraph);
	paragraph = '<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">' +
	'<rect x="0" y="0" width="100%" height="100%" fill="#7890A7" stroke-width="1" stroke="#ffffff" ></rect>' +
	'<foreignObject x="0" y="0" width="100%" height="100%">' +
	'<div xmlns="http://www.w3.org/1999/xhtml" style="font-size:11px">'
	+ paragraph +
	'</div>' + '</foreignObject>' + '</svg>';
	var svg = new Blob([paragraph], {
	type : 'image/svg+xml;charset=utf-8'
	});
	var url = DOMURL.createObjectURL(svg);
	nodes.add({
	id : idCnt,
	title : 'tooltip' + idCnt,
	label : 'Node ' + idCnt,
	image : url,
	shape : "image",
	allowedToMoveX : true,
	allowedToMoveY : true,
	//widthMax: 30
	});
	idCnt++;
	}*/

}

var options = {

	hierarchicalLayout : false,
	/*
	hierarchicalLayout : {
	direction : "LR"
	},*/
	dataManipulation : true,
	nodes : {
		//	widthMin : 5, // min width in pixels
		//	widthMax : 200 // max width in pixels
		//	fontDrawThreshold : 5
	},
	/*tooltip : {
	delay : 200,
	fontColor : "black",
	fontSize : 14, // px
	fontFace : "verdana",
	color : {
	border : "#666",
	background : "#FFFFC6"
	}
	},*/
	physics : {
		barnesHut : {
			gravitationalConstant : -6000,
			springConstant : 0.04,
			centralGravity : 0,
			damping : 0.1,
			springLength : 100
		}
	},
	smoothCurves : {
		dynamic : false,
		type : '1'
	}
};